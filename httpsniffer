#!/usr/bin/perl
use strict;
use warnings;

=encoding utf8

=head1 NAME

httpsniffer

=head1 SYNOPSIS

	./httpsniffer

=head1 DESCRIPTION

The C<httpsniffer> program reads from tcpdump, which it starts
internally with sudo, and prints out HTTP request and response
headers, up to 1024 bytes.  It only looks for packets with a
source or destination port 80.

If you want to change any of the behaviour, you have to edit the
script.

You have to be able to sudo, or be the superuser to use tcpdump.

=head1 TO DO

* make the ports configurable

* look for multiple ports

* make the net interface configurable

=head1 SOURCE AVAILABILITY

This source is part of a SourceForge project which always has the
latest sources in CVS, as well as all of the previous releases.

	https://github.com/briandfoy/httpsniffer

If, for some reason, I disappear from the world, one of the other
members of the project can shepherd this module appropriately.

=head1 AUTHOR

brian d foy C<< <bdfoy@cpan.org> >>

=head1 COPYRIGHT AND LICENSE

Copyright 2002-2019, brian d foy.  All rights reserved.

This program may be redistributed under the same turns as Perl
itself.


=cut

__PACKAGE__->run unless caller;

sub run
	{
	my( $header, $packet ) = ('', '');

	open STDIN, "-|", 'sudo /usr/sbin/tcpdump -lx -i en1 -s 1024 dst port 80 or src port 80';
	#die "Could not open tcpdump" unless $?;

	LINE: while( <> )
		{
		chomp;

		if( /^\S+/ )
			{
			print_packet( $header, $packet );
			$header = $_;
			$packet = undef;
			next LINE;
			}

		$packet .= $_;
		}
	}

sub print_packet
	{
	my( $header, $packet ) = @_;

	$packet =~ s/0x[0-9a-f]+://mig;

	$packet =~ s/\s//g;

	$packet =~ s/.{104}//; # remove protocol info
	return unless length $packet > 0;

	$packet =~ s/0d0a0d0a.*/0d0/i; # Just keep the HTTP header

	my $pretty = '';
	#print $packet; return;

	BYTE: while( $packet =~ m/\G([0-9a-f]{2})\s*/ig )
		{
		my $hex = hex $1;

		if( $hex == 0x0D ) { $pretty .= "\n"; next BYTE }
		if( $hex == 0x0A ) { next BYTE }

		$pretty .= do {
			if( $hex < 0x20 or $hex > 0x7f ) { '.' }
			else                             { chr $hex }
			};
		}

	if( $pretty =~ m/^(?:HTTP|GET|POST)/ )
		{
		print_header( $header );
		print $pretty;
		}

	return length $packet;
	}

sub print_header
	{
	my $header = shift;
	my ( $time, $src, undef, $dst, ) = split /\s+/, $header;
	$time =~ s/\..*//;
	$dst =~ s/:$//;
	print "-" x 73, "\n";
	print "Time: $time Src: $src Dst: $dst\n";
	}
